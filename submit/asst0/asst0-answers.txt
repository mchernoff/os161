


Question 1:

A trap is a type of exception in a user process and it usually will invoke system call in kernel.
So when a trap occure, the exception handle code will be executed which will be in /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/arch/mips/locore/exception-mips1.S.
The UTLB exception handler is at line 68 and General exception handler is at line 86. 
So the first line to execute will be line 69 and 87 depending on what kind of trap is occured. 
Since traps usually invoke system call, control gets transferred to from system call function that can be find at /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/arch/mips/syscall/syscall.c.

An interrupt is like a signal from system hardware.
In /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/arch/mips/locore/trap.c at line 153, an interrupt will be handle differently than a trap.



Question 2:

The system call instruction can be find at /ubc/ece/home/ugrads/v/v3s1b/os161/src/userland/lib/libc/arch/mips/syscalls-mips.S at line 83.



Question 3:

Those c functions in libc will be used in both kernel and user level library.



Question 4:

Configure checks whether the os have <err.h> and ntohll() file or not. When the user add / delete those files we need to rerun that.

Question 5:

Because Assembly language is a machine-dependent language. 
Therefore any function that is based on assembly language or using some special registers will be machine-dependen as well.

It will make it a lot easier to seperate machine-dependent code and machine-independent code since the developer will only need to adjust machine-dependent code when they want to apply to a different machine. 



Question 6:

A trapframe takes 37 registers, and each registers_ts is 4 bytes so a trapframe takes 37 * 4 = 148 bytes according to struct trapframe from /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/arch/mips/include/trapframe.h.




Question 7:

When the kernel configuration is changed, then we should rerun config script.



Question 8:

After we edit depend information from header files.



Question 9:

After we edit kernel code.



Question 10:

/ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/main/menu.c contains all the commands.
To add a command, let's add a function based on the structure of other function:



static int cmd_helloworld(int nargs, char **args)

{

	(void)nargs;

	(void)args;

	kprintf("Hello World!");

	return 0;

}



Question 11:

The standard utilities from the machine will not work for OS/161 since we are sort of running OS/161 on hardware simulator on our machine / ece server but not on real hardware. Therefore we have to include those header files.



Question 12:

The function return value will be stored in the v0 register.
It will also be saved in a callee-saved register s0 to be preserved across procedure calls.



Question 13:

First define the new system call in /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/include/kern/syscall.h and also for kernel calls in /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/include/syscall.h and in /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/include/kern/syscall.h.

Then handle the system call in /ubc/ece/home/ugrads/v/v3s1b/os161/src/kern/arch/mips/syscall/syscall.c  syscall(struct trapframe *tf) function for the switch case.

Re-run kern/conf/config script, run bmake depend, bmake and bmake install in kern/compile/DUMBVM.